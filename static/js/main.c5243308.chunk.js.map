{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/CountryPicker/CountryPicker.module.css","App.module.css","components/Chart/Chart.module.css","img/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","reversedData","reverse","map","positive","death","date","dateChecked","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","currentData","fetchAPI","lineChart","length","labels","toLocaleDateString","datasets","label","borderColor","borderRadius","backgroundColor","fill","options","legend","fontColor","fontSize","scales","yAxes","gridLines","ticks","xAxes","barChart","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","nativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","alt","src","mainImage","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5243308.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\n//creates the style of the cards similar to bootstrap\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\n//shows the number counting up to value\nimport CountUp from 'react-countup';\n\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\n    if(!confirmed){\n        return 'Loading... ';\n    }\n\n    return (\n        <div className = {styles.container}>\n            <Grid container spacing={3} justify =\"center\">\n                <Grid item component = {Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Infected\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start = {0}\n                                end = {confirmed.value}\n                                duration={2.8}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Number of active cases of Covid-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component = {Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Recovered\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start = {0}\n                                end = {recovered.value}\n                                duration={2}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Number of Reovered from Covid-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component = {Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Deaths\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start = {0}\n                                end = {deaths.value}\n                                duration={2.8}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Number of Deaths Caused of Covid-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","//used to make api requests\nimport axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n\n    if(country) {\n        changeableUrl = `${url}/countries/${country}`;\n    }\n\n    try {\n        const {data: {confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n        \n        return {confirmed, recovered, deaths, lastUpdate }; \n    }catch (error){\n        console.log(error);\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n      const { data } = await axios.get('https://api.covidtracking.com/v1/us/daily.json');\n      //reverse and map the data \n      const reversedData = data.reverse().map(({ positive, recovered, death, dateChecked: date }) => ({ \n        confirmed: positive, \n        recovered, \n        deaths: death, \n        date, \n        }));\n  \n      return reversedData;\n    } catch (error) {\n      \n    }\n  };\n/*\nexport const fetchDailyData = async () => {\n    try{\n        const {data} = await axios.get(`${url}/daily`);\n        \n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n            recovered: dailyData.recovered.total,\n        }));\n\n\n        return modifiedData;\n\n    }catch(error){\n\n    }\n}\n*/\n\nexport const fetchCountries = async () => {\n    try{\n        const {data : {countries}} = await axios.get(`${url}/countries`);\n        \n        return countries.map((country) => country.name);\n\n    }catch (error){\n        console.log(error);\n    }\n}","import React, {useState, useEffect} from 'react';\nimport {fetchDailyData} from '../../api';\nimport {Line, Bar} from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({data:{confirmed, deaths, recovered}, country}) => {\n    const [dailyData, setDailyData] = useState({});\n  \n    useEffect(() => {\n      const fetchAPI = async () => {\n        const currentData = await fetchDailyData();\n        setDailyData(currentData);\n      };\n  \n      fetchAPI();\n    }, []);\n\n\nconst lineChart = (\n    dailyData.length ? (\n      <Line\n        data={{\n          labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n            \n          datasets: [{\n            data: dailyData.map((data) => data.confirmed),\n            label: 'Infected',\n            borderColor: '#77b603',\n            borderRadius: '.5px',\n            backgroundColor: 'rgba(119, 182, 3, .2)',\n            fill: true,\n          },{\n            data: dailyData.map((data) => data.recovered),\n            label: 'Recovered',\n            borderColor: '#00a6d1',\n            backgroundColor: 'rgba(0, 166, 209, .2)',\n            fill: true,\n          }, {\n            data: dailyData.map((data) => data.deaths),\n            label: 'Deaths',\n            borderColor: '#b7001b',\n            backgroundColor: 'rgba(183, 0, 27, .5)',\n            fill: true,\n          },  \n          ],\n  \n        }\n        }\n        options ={{\n            legend: {\n                labels: {\n                    fontColor: 'rgb(151, 151, 151)',\n                    fontSize: 12,\n                }\n            },\n            scales: {\n                yAxes: [{\n                    gridLines: {\n                        color: 'rgb(151, 151, 151)'\n                    },\n                    ticks: {\n                        fontColor: \"rgb(151, 151, 151)\",\n                    }\n                }],\n                xAxes: [{\n                    gridLines: {\n                        color: 'rgb(151, 151, 151)'\n                    },\n                    ticks: {\n                        fontColor: \"rgb(151, 151, 151)\",\n\n                    }  \n                }],\n            },\n        }}\n        />\n    ) : null\n  );\n\n    const barChart = (\n        \n         confirmed\n            ? (\n                <Bar \n                    data = {{\n                        labels: ['Infected', 'Recovered', 'Deaths'],\n                        datasets: [{\n                            label: 'People',\n                            backgroundColor: ['#77b603', '#00a6d1', '#b7001b'],\n                            data: [confirmed.value, recovered.value, deaths.value]\n                        }]\n\n                    }}\n                    options ={{\n                        legend: {display: false},\n                        title: {display: true, text:`Current state of ${country}`},\n                    }}\n                />\n                \n            ) : null\n            \n    );\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core';\n\nimport {fetchCountries } from '../../api';\n\nimport styles from './CountryPicker.module.css';\n\nconst CountryPicker = ({handleCountryChange}) => {\n    const[fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries() );\n        }\n        fetchAPI();   \n\n    }, [setFetchedCountries]);    \n\n    return (\n        <FormControl className = {styles.formControl}>\n            <NativeSelect className = {styles.nativeSelect} defaultValue = \"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                <option className = {styles.text} value =\"\"> Global</option>\n                {fetchedCountries.map((country, i) => <option key={i} value ={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React from 'react';\n\nimport { Cards, Chart, CountryPicker } from './components';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\nimport mainImage from './img/image.png';\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: '',\n  }\n\n  async componentDidMount(){\n    const fetchedData = await fetchData();\n\n    this.setState({ data: fetchedData});\n  }\n\n  //need to pass the country to the App to change the Cards and Chart\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country});\n\n  }\n\n\n  render() {\n    const {data, country} = this.state;\n    return (\n      <div className={styles.container}>\n        <img className = {styles.image} alt= \"COVID-19\" src={mainImage}/>\n        <Cards\n          data = {data}\n        />\n        <CountryPicker \n          handleCountryChange={this.handleCountryChange} \n        />\n        <Chart \n          data= {data}\n          country = {country}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\",\"nativeSelect\":\"CountryPicker_nativeSelect__2MsIV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","module.exports = __webpack_public_path__ + \"static/media/image.526b1df0.png\";"],"sourceRoot":""}